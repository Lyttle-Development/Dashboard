generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id    String  @id @default(uuid())
  name  String
  email String  @unique
  phone String?

  // Relations
  addresses Address[]
  invoices  Invoice[]

  updatedAt DateTime  @default(now()) @updatedAt
  createdAt DateTime  @default(now())
  Project   Project[]
}

model Address {
  id         String   @id @default(uuid())
  street     String
  city       String
  state      String
  country    String
  zipCode    String
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  updatedAt DateTime @default(now()) @updatedAt
  createdAt DateTime @default(now())
}

model Category {
  id     String         @id @default(uuid())
  name   String         @unique
  prices ServicePrice[]

  updatedAt DateTime @default(now()) @updatedAt
  createdAt DateTime @default(now())
}

model Invoice {
  id          String        @id @default(uuid())
  invoiceDate DateTime      @default(now())
  amount      Float
  statusId    String
  status      InvoiceStatus @relation(fields: [statusId], references: [id])
  customerId  String
  customer    Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  printJobs   PrintJob[]
  projects    Project[]

  updatedAt DateTime @default(now()) @updatedAt
  createdAt DateTime @default(now())
}

model InvoiceStatus {
  id       String    @id @default(uuid())
  status   String    @unique
  invoices Invoice[]

  updatedAt DateTime @default(now()) @updatedAt
  createdAt DateTime @default(now())
}

model PrintJob {
  id            String        @id @default(uuid())
  name          String
  scheduledDate DateTime?
  ordered       Boolean?      @default(false)
  completed     Boolean?      @default(false)
  quantity      Int?
  material      PrintMaterial @relation(fields: [materialId], references: [id])
  materialId    String
  printTime     Int? // Store in minutes
  weight        Float? // Store in grams

  Invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId String?

  updatedAt DateTime @default(now()) @updatedAt
  createdAt DateTime @default(now())
}

model PrintMaterial {
  id        String @id @default(uuid())
  type      String // FDM, SLA, etc.
  subType   String // PLA, ABS, RESIN, etc.
  stock     Float // Available material in grams
  color     String
  unitPrice Float // Price per gram

  printJobs PrintJob[]

  updatedAt DateTime @default(now()) @updatedAt
  createdAt DateTime @default(now())
}

model Project {
  id       String        @id @default(uuid())
  name     String
  clientId String?
  client   Customer?     @relation(fields: [clientId], references: [id])
  priceId  String?
  price    ServicePrice? @relation(fields: [priceId], references: [id])
  timeLogs TimeLog[]

  updatedAt DateTime @default(now()) @updatedAt
  createdAt DateTime @default(now())
  Invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId String?
}

model TimeLog {
  id        String    @id @default(uuid())
  projectId String?
  project   Project?  @relation(fields: [projectId], references: [id])
  startTime DateTime?
  endTime   DateTime?

  updatedAt DateTime @default(now()) @updatedAt
  createdAt DateTime @default(now())
}

model ServicePrice {
  id          String    @id @default(uuid())
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  service     String?
  standard    Float? // Min standard hourly rate
  standardMin Float? // Min standard hourly rate
  standardMax Float? // Max standard hourly rate
  friends     Float? // Min friends hourly rate
  friendsMin  Float? // Min friends hourly rate
  friendsMax  Float? // Max friends hourly rate

  updatedAt DateTime  @default(now()) @updatedAt
  createdAt DateTime  @default(now())
  Project   Project[]
}
