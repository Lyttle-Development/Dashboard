generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  phone     String?
  createdAt DateTime @default(now())

  // Relations
  addresses Address[]
  orders    Order[]
  invoices  Invoice[]
}

model Address {
  id         String   @id @default(uuid())
  street     String
  city       String
  state      String
  country    String
  zipCode    String
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model Order {
  id         String   @id @default(uuid())
  orderDate  DateTime @default(now())
  total      Float
  status     String
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  // Relations
  orderItems OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  quantity  Int
  price     Float
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Product {
  id          String   @id @default(uuid())
  name        String
  price       Float
  description String?
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  // Relations
  orderItems OrderItem[]
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model Invoice {
  id          String   @id @default(uuid())
  invoiceDate DateTime @default(now())
  amount      Float
  status      String
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model PrintJob {
  id             String        @id @default(uuid())
  createdAt      DateTime      @default(now())
  scheduledDate  DateTime
  completed      Boolean       @default(false)
  ordered        Boolean       @default(false)
  quantity       Int
  product        String
  printType      PrintType
  material       PrintMaterial @relation(fields: [materialId], references: [id])
  materialId     String
  color          String
  printTime      Int // Store in minutes
  weight         Float // Store in grams
  totalPrice     Float
  suggestedPrice Float
}

model PrintMaterial {
  id        String @id @default(uuid())
  name      String @unique
  type      String // FDM, SLA, etc.
  stock     Float // Available material in grams
  color     String
  unitPrice Float // Price per gram

  printJobs PrintJob[]
}

enum PrintType {
  FDM
  SLA
  Resin
}

model Project {
  id        String    @id @default(uuid())
  name      String
  client    String
  createdAt DateTime  @default(now())
  timeLogs  TimeLog[]
}

model TimeLog {
  id          String    @id @default(uuid())
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  startTime   DateTime
  endTime     DateTime?
  serviceType String
  category    String
  hourlyRate  Float
  totalPrice  Float?
}

model ServicePrice {
  id           String @id @default(uuid())
  category     String
  service      String
  estimatedMin Int? // Min estimated hours (if applicable)
  estimatedMax Int? // Max estimated hours (if applicable)
  standardMin  Float // Min standard hourly rate
  standardMax  Float // Max standard hourly rate
  friendsMin   Float // Min friends hourly rate
  friendsMax   Float // Max friends hourly rate
}
